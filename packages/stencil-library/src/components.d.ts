/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DiffView {
        "newData": any;
        "oldData": any;
        /**
          * @default 'split'
         */
        "viewMode": 'split' | 'unified';
    }
    interface HexColorPicker {
        /**
          * @default '#ffffff'
         */
        "color": string;
    }
}
export interface HexColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHexColorPickerElement;
}
declare global {
    interface HTMLDiffViewElement extends Components.DiffView, HTMLStencilElement {
    }
    var HTMLDiffViewElement: {
        prototype: HTMLDiffViewElement;
        new (): HTMLDiffViewElement;
    };
    interface HTMLHexColorPickerElementEventMap {
        "colorChange": string;
    }
    interface HTMLHexColorPickerElement extends Components.HexColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHexColorPickerElementEventMap>(type: K, listener: (this: HTMLHexColorPickerElement, ev: HexColorPickerCustomEvent<HTMLHexColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHexColorPickerElementEventMap>(type: K, listener: (this: HTMLHexColorPickerElement, ev: HexColorPickerCustomEvent<HTMLHexColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHexColorPickerElement: {
        prototype: HTMLHexColorPickerElement;
        new (): HTMLHexColorPickerElement;
    };
    interface HTMLElementTagNameMap {
        "diff-view": HTMLDiffViewElement;
        "hex-color-picker": HTMLHexColorPickerElement;
    }
}
declare namespace LocalJSX {
    interface DiffView {
        "newData"?: any;
        "oldData"?: any;
        /**
          * @default 'split'
         */
        "viewMode"?: 'split' | 'unified';
    }
    interface HexColorPicker {
        /**
          * @default '#ffffff'
         */
        "color"?: string;
        "onColorChange"?: (event: HexColorPickerCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "diff-view": DiffView;
        "hex-color-picker": HexColorPicker;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "diff-view": LocalJSX.DiffView & JSXBase.HTMLAttributes<HTMLDiffViewElement>;
            "hex-color-picker": LocalJSX.HexColorPicker & JSXBase.HTMLAttributes<HTMLHexColorPickerElement>;
        }
    }
}
